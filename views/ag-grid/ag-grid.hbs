<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AG Grid Enterprise with Dynamic Loading and Editing</title>
    <!-- 引入 AG Grid 的 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css">
    <style>
        /* 设置表格的高度和宽度 */
        #myGrid {
            height: 400px;
            width: 100%;
        }

        .custom-tooltip {
            padding: 5px;
        }

        .custom-tooltip p {
            margin: 5px;
            white-space: nowrap;
        }

        .custom-tooltip p:first-of-type {
            font-weight: bold;
        }

        .verification-errors-row {
            background-color: #cc693344;
        }

        .verification-errors-row .ag-cell-edit-wrapper {
            border: solid 3px #cc693344 !important;
        }
    </style>
</head>

<body>
    <h1>AG Grid - Dynamic Loading and Editing</h1>
    <div class="button-container">
        <!-- 创建一个按钮来添加新行 -->
        <button id="addRowBtn">Add New Row</button>
    </div>
    <!-- 创建一个容器来放置 AG Grid -->
    <div id="myGrid" class="ag-theme-alpine"></div>

    <script src="https://cdn.jsdelivr.net/npm/lodash"></script>
    <!-- 引入 AG Grid 的 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-enterprise/dist/ag-grid-enterprise.noStyle.js"></script>
    <!-- 引入 Amis Formula -->
    <script type="module">
        import { evaluate } from 'https://cdn.skypack.dev/amis-formula';
        window.evaluate = evaluate;

        // const expression = '${1 + 2 * 3}';
        // const result = evaluate(expression);
        // console.log('Result:', result); // Output: 7
    </script>
</body>
<script>

    const B6_TABLES_API = '/api/tables/v2';
    const baseId = '{{ baseId }}';
    const tableId = '{{ tableId }}';

    // 启用 AG Grid 企业版
    agGrid.LicenseManager.setLicenseKey("YOUR_LICENSE_KEY_HERE");

    let gridApi; // 提前声明 gridApi 以便全局访问
    let gridOptions; // 提前声明 gridOptions 以便全局访问
    let table;

    const padZero = num => num.toString().padStart(2, '0');
    class DateTimeEditor {
        init(params) {
            this.eInput = document.createElement('input');
            this.eInput.type = 'datetime-local';
            // this.eInput.value = params.value ? this.formatDate(params.value) : '';
            const localDate = new Date(params.value);
            const value = `${localDate.getFullYear()}-${padZero(localDate.getMonth() + 1)}-${padZero(localDate.getDate())} ${padZero(localDate.getHours())}:${padZero(localDate.getMinutes())}`;
            this.eInput.value = value;
            this.eInput.style.width = '100%';
        }

        getGui() {
            return this.eInput;
        }

        afterGuiAttached() {
            this.eInput.focus();
        }

        getValue() {
            const value = this.eInput.value;
            return value ? new Date(value) : null;
        }

        formatDate(date) {
            const d = new Date(date);
            return d.toISOString();
        }
    }

    class MultiSelectCellEditor {
        init(params) {
            this.eInput = document.createElement('select');
            this.eInput.setAttribute('multiple', 'true');
            this.eInput.style.width = '200px';
            const options = params.colDef.cellEditorParams.values;
            options.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.text = option;
                optionElement.value = option;
                this.eInput.appendChild(optionElement);
            });

            // 设置初始值
            const selectedValues = Array.isArray(params.value) ? params.value : [];
            for (let option of this.eInput.options) {
                if (selectedValues.includes(option.value)) {
                    option.selected = true;
                }
            }
        }

        getGui() {
            return this.eInput;
        }

        afterGuiAttached() {
            this.eInput.focus();
        }

        getValue() {
            const selectedOptions = Array.from(this.eInput.selectedOptions);
            return selectedOptions.map(option => option.value);
        }

        destroy() { }

        isPopup() {
            return true;
        }
    }

    class CustomTooltip {
        constructor() {
            this.eGui = null;
        }

        init(params) {
            this.eGui = document.createElement('div');
            const color = params.color || '#cc693344';

            this.eGui.classList.add('custom-tooltip');
            this.eGui.style.backgroundColor = color;
            this.eGui.innerHTML = `
            <div><b>不符合校验规则</b></div>
            <div>${params.value}</div>
        `;
        }

        getGui() {
            return this.eGui;
        }
    }

    // 创建一个异步函数来初始化表格
    async function initializeGrid() {
        try {
            // 获取列定义
            const tableResponse = await fetch(B6_TABLES_API + '/meta/bases/' + baseId + '/tables/' + tableId, { credentials: 'include' });
            table = await tableResponse.json();
            console.log(table);

            const dataTypeDefinitions = {
                date: {
                    baseDataType: 'date',
                    extendsDataType: 'date',
                    valueGetter: params => {
                        const fieldType = params.colDef.cellEditorParams.fieldConfig.type;
                        const fieldName = params.colDef.field;
                        const fieldValue = params.data[fieldName];
                        if (!fieldValue) return null;

                        const date = new Date(fieldValue);
                        return date;
                    },
                    valueFormatter: params => {
                        const fieldType = params.colDef.cellEditorParams.fieldConfig.type;
                        const date = new Date(params.value);

                        if (!params.value) return "";

                        if (fieldType === "date") {
                            return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}`;
                        } else if (fieldType === "datetime") {
                            // Convert to local time considering timezone
                            const localDate = new Date(date.getTime());
                            return `${localDate.getFullYear()}-${padZero(localDate.getMonth() + 1)}-${padZero(localDate.getDate())} ${padZero(localDate.getHours())}:${padZero(localDate.getMinutes())}`;
                        }

                        return "";
                    }
                },
                formula: {
                    baseDataType: 'text',
                    extendsDataType: 'text',
                    fields: {}
                }
            };

            const tooltipValueGetter = params => {
                if (params.data.__verificationErrors && params.data.__verificationErrors.length) {
                    return params.data.__verificationErrors;
                }
            }

            const columnDefs = table.fields.map(field => {
                let cellDataType,
                    cellEditorParams,
                    cellEditor,
                    valueFormatter,
                    valueGetter,
                    fieldOptions,
                    editable = true,
                    filter,
                    filterParams;

                // 根据字段类型设置 dataType
                cellEditorParams = {
                    fieldConfig: field
                };
                filterParams = {
                    debounceMs: 200,
                    maxNumConditions: 1
                }
                switch (field.type) {
                    case 'text':
                    case 'textarea':
                        cellDataType = 'text';
                        filter = 'agTextColumnFilter';
                        Object.assign(filterParams, {
                            filterOptions: ["contains", "notContains", "equals", "startsWith", "endsWith"]
                        });
                        break;
                    case 'number':
                        cellDataType = 'number';
                        Object.assign(cellEditorParams, {
                            precision: field.precision ?? 0
                        });
                        filter = 'agNumberColumnFilter';
                        Object.assign(filterParams, {
                            filterOptions: ["equals", "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual"]
                        });
                        break;
                    case 'select':
                        cellDataType = 'text';
                        fieldOptions = field.options && field.options.split("\n").map((n) => { return n.trim() }) || [];
                        fieldOptions.unshift("");
                        Object.assign(cellEditorParams, {
                            values: fieldOptions
                        });
                        cellEditor = "agSelectCellEditor";
                        filter = 'agSetColumnFilter';
                        Object.assign(filterParams, {
                            values: fieldOptions
                        });
                        break;
                    case 'select-multiple':
                        cellDataType = 'object';
                        fieldOptions = field.options && field.options.split("\n").map((n) => { return n.trim() }) || [];
                        Object.assign(cellEditorParams, {
                            values: fieldOptions
                        });
                        cellEditor = MultiSelectCellEditor;
                        filter = 'agSetColumnFilter';
                        Object.assign(filterParams, {
                            values: fieldOptions
                        });
                        break;
                    case 'date':
                        cellDataType = 'date';
                        // cellEditor = "agDateInput"; // ag-grid内置日期编辑控件，但是显示配置的话样式有问题
                        valueFormatter = dataTypeDefinitions.date.valueFormatter;
                        // 如果不定义valueGetter，双击单元格进入编辑状态时，值显示为空
                        valueGetter = dataTypeDefinitions.date.valueGetter;
                        filter = 'agDateColumnFilter';
                        Object.assign(filterParams, {
                            filterOptions: ["equals", "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual"]
                        });
                        break;
                    case 'datetime':
                        cellDataType = 'date';
                        cellEditor = DateTimeEditor;
                        // 因为日期时间依赖了DateTimeEditor.init函数中对初始值定义，所以这里没必要再走一次valueGetter
                        // valueGetter = dataTypeDefinitions.date.valueGetter;
                        filter = 'agDateColumnFilter';
                        Object.assign(filterParams, {
                            filterOptions: ["equals", "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual"]
                        });
                        break;
                    case 'boolean':
                        cellDataType = 'boolean';
                        filter = 'agSetColumnFilter';
                        Object.assign(filterParams, {
                            values: [true, false],
                            suppressSelectAll: true,
                            comparator: (a, b) => {
                                // 将 true 显示在 false 之前
                                if (a === true && b === false) return -1;
                                if (a === false && b === true) return 1;
                                return 0;
                            },
                            valueFormatter: (params) => (params.value ? '是' : '否')
                        });
                        break;
                    case 'formula':
                        cellDataType = 'formula';
                        editable = false;
                        // 记录所有公式字段配置方便取出来用
                        dataTypeDefinitions.formula.fields[field.name.toLocaleLowerCase()] = field;
                        break;
                    default:
                        cellDataType = 'text'; // 默认类型
                }

                return {
                    field: field.name.toLowerCase(), // 假设字段名需要小写
                    headerName: field.label,
                    cellDataType: cellDataType,
                    cellEditorParams,
                    cellEditor,
                    editable,
                    valueFormatter,
                    valueGetter,
                    tooltipMouseTrack: true,
                    tooltipInteraction: true,
                    tooltipShowDelay: 0,
                    tooltipHideDelay: 8000,
                    tooltipValueGetter,
                    filter,
                    filterParams
                };
            });

            // 初始化网格配置
            gridOptions = {
                columnDefs: columnDefs,
                dataTypeDefinitions,
                rowClassRules: {
                    'verification-errors-row': (params) => { return params.data && params.data.__verificationErrors && params.data.__verificationErrors.length; }
                },
                rowData: null, // 初始为空，通过 API 动态加载
                rowModelType: 'serverSide',
                paginationPageSize: 20,
                cacheBlockSize: 20,
                editType: 'fullRow',
                cellSelection: {
                    handle: {
                        mode: 'range',
                    }
                },
                onRowValueChanged: onRowValueChanged,
                //datasource: getDataSource(),
                defaultColDef: {
                    flex: 1,
                    minWidth: 100,
                    resizable: true,
                    tooltipComponent: CustomTooltip
                },
                serverSideDatasource: getServerSideDatasource(),
            };

            console.log("gridOptions:", gridOptions);

            // 渲染网格
            const gridDiv = document.querySelector('#myGrid');
            gridApi = agGrid.createGrid(gridDiv, gridOptions);

            // 设置新增行按钮的事件
            document.getElementById('addRowBtn').addEventListener('click', addNewRow);

        } catch (error) {
            console.error('Error initializing grid:', error);
        }
    }

    // 监听行数据改变事件
    async function onRowValueChanged(event) {
        const data = event.data;
        console.log('Saving updated data to server:', data);
        try {
            // 校验
            const rowNode = event.node;
            let validated = true;
            const verifications = table.verifications || [];
            const verificationErrors = [];
            verifications.forEach(function (verification) {
                validated = evaluate(verification.rule, data, { evalMode: true });
                if (!validated) {
                    verificationErrors.push(verification.alert);
                }
            });
            validated = verificationErrors.length === 0;
            if (!validated) {
                console.log("The table verifications is not passed for the row data:", verifications, data);
                event.api.startEditingCell({
                    rowIndex: event.rowIndex,
                    colKey: event.api.getAllGridColumns()[0].colId
                });
                rowNode.setData(Object.assign({}, data, { __verificationErrors: verificationErrors }));
                alert(verificationErrors);
                return;
            }
            // 循环所有公式字段执行公式计算并设置值到data中
            const dataTypeDefinitions = event.api.getGridOption("dataTypeDefinitions");
            const formulaFields = dataTypeDefinitions.formula.fields;
            for (var formulaFieldName in formulaFields) {
                const formulaField = formulaFields[formulaFieldName];
                const formula = formulaField.formula;
                data[formulaFieldName] = evaluate(formula, data, { evalMode: true });// evalMode为true表示公式表达式中不需要写外层${}
            }
            // 保存更新的数据到服务端
            delete data.__verificationErrors
            const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId + '/' + data._id, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            const responseData = await response.json();
            console.log('Data saved successfully:', responseData);
            rowNode.setData(responseData);
        } catch (error) {
            console.error('Error saving data:', error);
        }
    }


    function getServerSideDatasource() {
        return {
            getRows: async function (params) {
                console.log('Server Side Datasource - Requesting rows from server:', params.request);
                try {
                    const colDefs = _.keyBy(_.map(params.api.getAllGridColumns(), "colDef"), "field");
                    const modelFilters = filterModelToOdataFilters(params.request.filterModel, colDefs);
                    console.log('Server Side Datasource - Requesting rows by modelFilters:', modelFilters);
                    //const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId + '?startRow=' + params.startRow + '&endRow=' + params.endRow);
                    let url = `${B6_TABLES_API}/${baseId}/${tableId}`;
                    if (modelFilters.length > 0) {
                        const separator = url.includes('?') ? '&' : '?';
                        url += `${separator}filters=${JSON.stringify(modelFilters)}`;
                    }

                    const sortModel = params.request.sortModel;
                    let sort = []
                    _.forEach(sortModel, (sortField) => {
                        //sort.push([sortField.colId, sortField.sort])
                        sort.push(`${sortField.colId} ${sortField.sort}`)
                    });
                    console.log('Server Side Datasource - Requesting rows by sortModel:', sortModel);
                    if (sort.length > 0) {
                        const separator = url.includes('?') ? '&' : '?';
                        url += `${separator}sort=${sort.join(",")}`;
                    }

                    const response = await fetch(url);
                    const data = await response.json();

                    params.success({
                        rowData: data.data,
                        rowCount: data.totalCount
                    });
                } catch (error) {
                    console.error('Error fetching data from server:', error);
                    params.fail();
                }
            }
        };
    }

    // 新增行的功能
    async function addNewRow() {
        if (!gridOptions) {
            console.error('Grid options not available. Ensure grid is initialized properly.');
            return;
        }
        const newRow = createNewRowData();

        // 将新增数据发送到服务器
        try {
            const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newRow)
            });

            if (response.ok) {
                console.log('New row added successfully');
                // 新增数据成功后刷新网格数据
                gridApi.refreshServerSide({ purge: true });
            } else {
                console.error('Failed to add new row:', response.statusText);
            }
        } catch (error) {
            console.error('Error adding new row:', error);
        }
    }

    // 创建一个新行数据，可以初始化为默认值或空值
    function createNewRowData() {
        const newRow = {};
        // 可以给每个字段一个默认值，例如：
        gridOptions.columnDefs.forEach(colDef => {
            const dfValue = getFieldDefaultValue(colDef); // 设置为空或设置默认值
            if (typeof dfValue != "undefined") {
                newRow[colDef.field] = dfValue;
            }
        });
        return newRow;
    }

    function getFieldDefaultValue(colDef) {
        const fieldConfig = colDef.cellEditorParams.fieldConfig;
        const defaultValue = fieldConfig.default_value;
        if (typeof defaultValue !== "undefined") {
            return defaultValue;
        }
        if (fieldConfig.type === "boolean") {
            return false;
        }
    }

    const FilterTypesMap = {
        'equals': '=',
        'notEqual': '!=',
        'contains': 'contains',
        'notContains': 'notcontains',
        'startsWith': 'startswith',
        'endsWith': 'endswith',
        'lessThan': '<',
        'lessThanOrEqual': '<=',
        'greaterThan': '>',
        'greaterThanOrEqual': '>=',
        'empty': 'empty' //TODO 不支持
    }

    /**
     * 把ag-grid filterModel 转为魔方filters格式
     * @param filterModel 
     */
    function filterModelToOdataFilters(filterModel, colDefs) {
        const filters = [];
        _.forEach(filterModel, (value, key) => {
            const fieldConfig = colDefs[key].cellEditorParams.fieldConfig;
            if (value.type === 'between') {
                if (value.filterType === "number") {
                    filters.push([key, "between", [value.numberFrom, value.numberTo]]);
                } else {
                    if (value.filter) {
                        filters.push([key, value.type, value.filter]);
                    } else {
                        filters.push([key, "between", [value.dateFrom, value.dateTo]]);
                    }
                }

            } else {
                let filterItem;
                switch (fieldConfig.type) {
                    case 'text':
                    case 'textarea':
                        filterItem = [key, FilterTypesMap[value.type], value.filter];
                        filters.push(filterItem);
                        break;
                    case 'number':
                        filterItem = [key, FilterTypesMap[value.type], value.filter];
                        filters.push(filterItem);
                        break;
                    case 'select':
                    case 'select-multiple':
                        filterItem = [key, "=", value.values.join(",")];
                        filters.push(filterItem);
                        break;
                    case 'date':
                    case 'datetime':
                        filterItem = [key, FilterTypesMap[value.type], value.dateFrom];
                        filters.push(filterItem);
                        break;
                    case 'boolean':
                        let filterValue = value.values[0];
                        if (typeof filterValue !== "boolean") {
                            filterValue = filterValue === "true"
                        }
                        filterItem = [key, "=", filterValue];
                        filters.push(filterItem);
                        break;
                    case 'formula':
                        // 不支持公式字段过滤
                        break;
                }
            }
        })
        return filters;
    }

    // 在文档加载后初始化表格
    document.addEventListener('DOMContentLoaded', function () {
        initializeGrid();
    });
</script>

</body>

</html>