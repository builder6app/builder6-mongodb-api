<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>DevExtreme Demo</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0" />
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cldrjs@0.4.4/dist/cldr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cldrjs@0.4.4/dist/cldr/event.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cldrjs@0.4.4/dist/cldr/supplemental.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cldrjs@0.4.4/dist/cldr/unresolved.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/exceljs@4.4.0/dist/exceljs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/filesaver.js@1.3.4/FileSaver.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/devextreme@22.2.14/dist/css/dx.material.blue.light.css" />
    <script src="https://cdn.jsdelivr.net/npm/devextreme@22.2.14/dist/js/dx.all.js"></script>
    <link rel="stylesheet" type="text/css" href="styles.css" />
    <script>
      
async function initializeGrid(baseId = '{{ baseId }}', tableId='{{ tableId }}') {
  const B6_TABLES_API = '/api/tables/v2';
  const tableResponse = await fetch(B6_TABLES_API + '/meta/bases/' + baseId + '/tables/' + tableId, {credentials: 'include'});
  const table = await tableResponse.json();
  
  console.log(table)

  function isNotEmpty(value) {
    return value !== undefined && value !== null && value !== "";
  }
  
  const customDataSource = new DevExpress.data.CustomStore({
      key: "_id",
      load: async function(loadOptions) {
          try {
              const params = {};

              [
                  "filter",
                  "group", 
                  "groupSummary",
                  "parentIds",
                  "requireGroupCount",
                  "requireTotalCount",
                  "searchExpr",
                  "searchOperation",
                  "searchValue",
                  "select",
                  "sort",
                  "skip",     
                  "take",
                  "totalSummary", 
                  "userData"
              ].forEach((i) => {
                  if (i in loadOptions && isNotEmpty(loadOptions[i])) {
                      params[i] = JSON.stringify(loadOptions[i]);
                  }
              });

              const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId + '?' + new URLSearchParams(params), {credentials: 'include'});
              if (!response.ok) throw new Error("Data loading error");
              const data = await response.json();

              return {
                  data: data.data,
                  totalCount: data.totalCount,
                  summary: data.summary,
                  groupCount: data.groupCount,
              };
          } catch (error) {
              throw new Error("Data loading error");
          }
      },

      insert: async function(values) {
          try {
              const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId, {
                  method: "POST",
                  headers: {
                      "Content-Type": "application/json"
                  },
                  body: JSON.stringify(values),
                  credentials: 'include'
              });
              if (!response.ok) throw new Error("Insertion failed");
              return await response.json();
          } catch (error) {
              throw new Error("Insertion failed");
          }
      },

      remove: async function(key) {
          try {
              const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId + '/' + encodeURIComponent(key), {
                  method: "DELETE",
                  credentials: 'include'
              });
              if (!response.ok) throw new Error("Deletion failed");
              return await response.json();
          } catch (error) {
              throw new Error("Deletion failed");
          }
      },

      update: async function(key, values) {
          try {
              const response = await fetch(B6_TABLES_API + '/' + baseId + '/' + tableId + '/' + encodeURIComponent(key), {
                  method: "PUT",
                  headers: {
                      "Content-Type": "application/json"
                  },
                  body: JSON.stringify(values),
                  credentials: 'include'
              });
              if (!response.ok) throw new Error("Update failed");
              return await response.json();
          } catch (error) {
              throw new Error("Update failed");
          }
      }
  });


  const columns = table.fields.map(field => {
    let dataType;

    // 根据字段类型设置 dataType
    switch (field.type) {
        case 'text':
            dataType = 'string';
            break;
        case 'number':
            dataType = 'number';
            break;
        case 'date':
            dataType = 'date';
            break;        
        case 'datetime':
            dataType = 'datetime';
            break;
        case 'boolean':
            dataType = 'boolean';
            break;
        default:
            dataType = 'string'; // 默认类型
    }

    return {
        dataField: field.name.toLowerCase(), // 假设字段名需要小写
        caption: field.name,
        dataType: dataType,
    };
  });

  const gridOptions = {
    dataSource: customDataSource,
    paging: {
      pageSize: 10,
    },
    pager: {
      visible: true,
      showPageSizeSelector: true,
      allowedPageSizes: [10, 25, 50, 100],
    },
    remoteOperations: true,
    searchPanel: {
      visible: true,
      highlightCaseSensitive: true,
    },
    groupPanel: { visible: true },
    grouping: {
      autoExpandAll: false,
    },
    editing: {
      mode: 'popup',
      allowUpdating: true,
      allowAdding: true,
      allowDeleting: true,
      popup: {
        title: 'Employee Info',
        showTitle: true,
        width: 700,
        height: 525,
      },
    },
    filterPanel: { visible: true },
    headerFilter: { visible: true },
    selection: {
      mode: 'multiple',
    },
    allowColumnReordering: true,
    allowColumnResizing: true,
    columnAutoWidth: true,
    columnChooser: {
      enabled: true,
    },
    columnFixing: {
      enabled: true,
    },
    rowAlternationEnabled: true,
    showBorders: true,
    width: '100%',
    columns: columns,
    export: {
      enabled: true,
      allowExportSelectedData: true,
    },
    onExporting(e) {
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet(table.name);

      DevExpress.excelExporter.exportDataGrid({
        component: e.component,
        worksheet,
        autoFilterEnabled: true,
      }).then(() => {
        workbook.xlsx.writeBuffer().then((buffer) => {
          saveAs(new Blob([buffer], { type: 'application/octet-stream' }),`${table.name}.xlsx`);
        });
      });
    },
    onContentReady(e) {
    },
  }

  $('#gridContainer').dxDataGrid(gridOptions);
}

$(() => {initializeGrid()})


    </script>
  </head>
  <body class="dx-viewport">
    <div class="demo-container">
      <div id="gridContainer"></div>
    </div>
  </body>
</html>
